#include <cstdint>
#include <cstdio>
#include <cstring>

uint8_t key[] = {0xc, 0x0, 0xf, 0xa, 0x2, 0xb, 0x9, 0x5, 0x8, 0x3, 0xd, 0x7, 0x1, 0xe, 0x6, 0x4, 0x11, 0x45, 0x14, 0x19, 0x19, 0x81, 0x9, 0x31, 0x88, 0x94, 0x64, 0x51, 0x28, 0x10, 0x93, 0x15, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x3, 0x6, 0xc, 0x18, 0x30, 0x23, 0x5, 0xa, 0x14, 0x28, 0x13, 0x26, 0xf, 0x1e, 0x3c, 0x3b, 0x35, 0x29, 0x11, 0x22, 0x7, 0xe, 0x1c, 0x38, 0x33, 0x25, 0x9, 0x12, 0x24, 0xb};
uint8_t keyExpanded[] = {0x5, 0x9, 0x9, 0x8, 0x1, 0x0, 0x5, 0x4, 0x1, 0x1, 0x5, 0x4, 0x4, 0x8, 0x8, 0x1, 0x9, 0xf, 0x1, 0x8, 0x1, 0x6, 0x3, 0x8, 0x8, 0x1, 0x1, 0x3, 0x3, 0x2, 0x5, 0x3, 0xf, 0x3, 0x5, 0x4, 0xc, 0x9, 0x4, 0x9, 0xb, 0x3, 0x8, 0x1, 0x7, 0x1, 0x1, 0x5, 0x6, 0x6, 0x3, 0x8, 0xa, 0xf, 0x3, 0x1, 0x6, 0x8, 0x5, 0x3, 0x1, 0x1, 0xf, 0x1, 0x9, 0x9, 0x4, 0x9, 0x6, 0x3, 0x1, 0x5, 0xb, 0x0, 0x1, 0x5, 0x9, 0x3, 0xe, 0x8, 0x5, 0x1, 0x3, 0x1, 0x2, 0x6, 0x1, 0x3, 0x8, 0xe, 0xf, 0x1, 0xb, 0x8, 0x6, 0x5, 0xb, 0x3, 0x1, 0x5, 0x5, 0x9, 0xa, 0x4, 0x0, 0x0, 0xe, 0x8, 0xc, 0x0, 0x7, 0x1, 0xa, 0x8, 0x1, 0x3, 0x8, 0x1, 0x9, 0x3, 0x8, 0x4, 0x6, 0x5, 0x7, 0xe, 0x1, 0xf, 0xf, 0x2, 0xa, 0x4, 0x6, 0x3, 0xc, 0x1, 0xa, 0x5, 0x7, 0x1, 0x6, 0x0, 0xb, 0xe, 0xd, 0x9, 0x9, 0x3, 0x3, 0x8, 0x1, 0x1, 0x6, 0x4, 0x1, 0xf, 0x7, 0x4, 0x1, 0x6, 0x1, 0x5, 0xc, 0x1, 0x5, 0x2, 0x0, 0xa, 0xf, 0x4, 0xb, 0xe, 0xd, 0x5, 0x7, 0x7, 0x3, 0xd, 0x1, 0x1, 0xe, 0x9, 0x4, 0x9, 0x7, 0x6, 0x1, 0x6, 0xa, 0x4, 0x0, 0x1, 0x0, 0xd, 0x0, 0xa, 0x1, 0x5, 0xc, 0xc, 0xe, 0xd, 0x7, 0x7, 0x1, 0x4, 0xf, 0xb, 0xb, 0xf, 0x4, 0x9, 0x1, 0xd, 0x8, 0x1, 0xa, 0x5, 0x0, 0x1, 0x0, 0x6, 0x6, 0x1, 0xc, 0xe, 0xc, 0xc, 0xc, 0xd, 0x7, 0x0, 0xa, 0x3, 0xf, 0xb, 0xc, 0xd, 0x5, 0x7, 0x3, 0x2, 0x8, 0x1, 0x1, 0xf, 0x0, 0x4, 0x2, 0x2, 0x6, 0x1, 0x6, 0x5, 0xf, 0x0, 0x6, 0xd, 0x7, 0x0, 0x7, 0xe, 0x9, 0xc, 0xb, 0x8, 0x5, 0x7, 0x2, 0x3, 0x0, 0xf, 0x5, 0x8, 0x0, 0x4, 0x6, 0x2, 0x4, 0x8, 0x3, 0x6, 0xd, 0x2, 0xf, 0x0, 0xa, 0xd};
uint8_t keyShuffle[] = {1, 2, 11, 6, 3, 0, 9, 4, 7, 10, 13, 14, 5, 8, 15, 12};

uint8_t keyShuffleReversed[16];

void encBlock(const uint8_t* input, uint8_t* output) {
    uint8_t f[16];
    uint8_t f2[16];
    for (int i = 0; i < 8; i++) {
        f[2 * i] = input[i] >> 4;
        f[2 * i + 1] = input[i] & 0xf;
    }

    for (int i = 0; i < 36; i++) {
        f[1] ^= key[keyExpanded[8 * i + 0] ^ f[0]];
        f[3] ^= key[keyExpanded[8 * i + 1] ^ f[2]];
        f[5] ^= key[keyExpanded[8 * i + 2] ^ f[4]];
        f[7] ^= key[keyExpanded[8 * i + 3] ^ f[6]];

        f[8+1] ^= key[keyExpanded[8 * i + 4] ^ f[8+0]];
        f[8+3] ^= key[keyExpanded[8 * i + 5] ^ f[8+2]];
        f[8+5] ^= key[keyExpanded[8 * i + 6] ^ f[8+4]];
        f[8+7] ^= key[keyExpanded[8 * i + 7] ^ f[8+6]];

        if (i != 35) {
            for (int j = 0; j < 16; j++)
                f2[j] = f[keyShuffle[j]];
            memcpy(f, f2, 16);
        }
    }

    for (int i = 0; i < 8; i++) {
        output[i] = (f[2 * i] << 4) | f[2 * i + 1];
    }
}

void decBlock(const uint8_t* input, uint8_t* output) {
    uint8_t f[16];
    uint8_t f2[16];
    for (int i = 0; i < 8; i++) {
        f[2 * i] = input[i] >> 4;
        f[2 * i + 1] = input[i] & 0xf;
    }

    for (int i = 35; i >= 0; i--) {
        if (i != 35) {
            for (int j = 0; j < 16; j++)
                f2[j] = f[keyShuffleReversed[j]];
            memcpy(f, f2, 16);
        }

        f[8+7] ^= key[keyExpanded[8 * i + 7] ^ f[8+6]];
        f[8+5] ^= key[keyExpanded[8 * i + 6] ^ f[8+4]];
        f[8+3] ^= key[keyExpanded[8 * i + 5] ^ f[8+2]];
        f[8+1] ^= key[keyExpanded[8 * i + 4] ^ f[8+0]];

        f[7] ^= key[keyExpanded[8 * i + 3] ^ f[6]];
        f[5] ^= key[keyExpanded[8 * i + 2] ^ f[4]];
        f[3] ^= key[keyExpanded[8 * i + 1] ^ f[2]];
        f[1] ^= key[keyExpanded[8 * i + 0] ^ f[0]];
    }

    for (int i = 0; i < 8; i++) {
        output[i] = (f[2 * i] << 4) | f[2 * i + 1];
    }
}

int main() {
    for (int i = 0; i < 16; i++)
        keyShuffleReversed[keyShuffle[i]] = i;

    uint8_t out[8*8+1] = {};
    uint64_t flagParts[] = {0x5894a5af7f7693b7, 0x94706b86ce8e1cce, 0x98ba6f1ff3cc98, 0xae6575961af354c, 0xd853f981df45ab41, 0xe1fefd554e662f7f, 0x3ca11fb09e498ab4};
    for (int i = 0; i < 7; i++) {
        decBlock((const uint8_t*) &flagParts[i], out + 8 * i);
    }
    printf("%s\n", out);
    return 0;
}
